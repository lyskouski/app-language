name: Project Release Artifacts

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    uses: ./.github/workflows/create_release_page.yml
    secrets: inherit
    permissions:
      contents: write
    with:
      draft: false

  build:
    name: Create ${{ matrix.target }} build
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    needs: release
    strategy:
      fail-fast: false
      matrix:
        target: [Windows, Linux, LinuxSnap, LinuxAppImage, Android]
        include:
          - os: windows-latest
            target: Windows
            build_path: windows/dist
            asset_extension: .zip
            asset_content_type: application/zip
          # Error: version `GLIBC_2.38' not found
          # Build Linux app in the oldest Ubuntu for better compatibility
          - os: ubuntu-22.04
            target: Linux
            build_path: linux/dist/tlum
            asset_extension: .tar.gz
            asset_content_type: application/gzip
          - os: ubuntu-22.04
            target: LinuxSnap
            build_path: ./
            asset_extension: .snap
            asset_content_type: application/gzip
          - os: ubuntu-22.04
            target: LinuxAppImage
            build_path: linux-appimage
            asset_extension: .AppImage
            asset_content_type: application/gzip
          - os: ubuntu-latest
            target: Android
            build_path: build
            asset_extension: .aab
            asset_content_type: application/gzip

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install requirements
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

# iOS / macOS - unified steps
      - name: Install Apple requirements
        if: matrix.target == 'iOS' || matrix.target == 'macOS'
        run: |
          pip install pyobjus

# iOS [TBD]

# macOS [TBD]

# Windows
      # Generate EXE
      - name: Build executable
        if: matrix.target == 'Windows'
        shell: powershell
        run: |
          cd windows
          python -m PyInstaller tlum.spec
          New-Item -ItemType Directory -Force -Path dist/assets
          Copy-Item -Path "..\assets\*" -Destination ".\dist\assets\" -Recurse
          Copy-Item -Path "AppxManifest.xml" -Destination "dist"

      - name: Update Version
        if: matrix.target == 'Windows'
        shell: powershell
        run: |
          $manifestPath = "windows\dist\AppxManifest.xml"
          (Get-Content $manifestPath -Raw) -replace '(<Identity[^>]*\sVersion=")[^"]+(")', "`${1}${{ needs.release.outputs.version }}.0`${2}" | Set-Content $manifestPath -Encoding utf8

        # Generate ZIP for Artifacts
      - name: Compress Windows Package
        if: matrix.target == 'Windows'
        run: compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}/tlum_${{ matrix.target }}${{ matrix.asset_extension }}
        working-directory: ${{ matrix.build_path }}

      # Generate MSIX
      - name: Install Chocolatey
        if: matrix.target == 'Windows'
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Verify Chocolatey
        if: matrix.target == 'Windows'
        shell: powershell
        run: choco -v

      - name: Install Windows 10 SDK
        if: matrix.target == 'Windows'
        shell: powershell
        run: choco install windows-sdk-10.0 -y --ignore-checksums

      - name: Locate Make Appx
        if: matrix.target == 'Windows'
        id: find_makeappx
        shell: powershell
        run: |
          $makeappx = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter makeappx.exe |
                      Where-Object { $_.FullName -match '\\x64\\' } |
                      Select-Object -First 1 -ExpandProperty FullName
          if (-not $makeappx) { throw "makeappx.exe (x64) not found!" }
          echo "Found makeappx.exe at $makeappx"
          echo "MAKEAPPX=$makeappx" >> $env:GITHUB_ENV

      - name: Package Application
        if: matrix.target == 'Windows'
        shell: powershell
        run: |
          & "${{ env.MAKEAPPX }}" pack /d "${{ matrix.build_path }}" /p "${{ matrix.build_path }}/tlum.msix"

      # Publish to Microsoft Store
      - name: Setup MS Store CLI
        if: matrix.target == 'Windows'
        uses: microsoft/setup-msstore-cli@ec39acd1144351ab7a9d8d25e12bf6fd1ba03150

      - name: Publish MSIX to the Microsoft Store
        if: matrix.target == 'Windows'
        run: |
          msstore reconfigure --tenantId ${{ secrets.WINDOWS_TENANT_ID }} --clientId ${{ secrets.WINDOWS_CLIENT_ID }} --clientSecret ${{ secrets.WINDOWS_SECRET }} --sellerId ${{ secrets.WINDOWS_SELLER_ID }}
          msstore publish "${{ github.workspace }}/${{ matrix.build_path }}/tlum.msix" -v -id 9NMKX9HVSVBP
        working-directory: ${{ matrix.build_path }}

# Linux
      - name: Install system dependencies for Kivy
        if: ${{ matrix.target == 'Linux' || matrix.target == 'LinuxAppImage' }}
        run: |
          sudo apt-get update
          sudo apt-get install libsdl2-2.0-0 libsdl2-dev libsdl2-mixer-2.0-0 libsdl2-mixer-dev
          sudo apt-get install ffmpeg libavdevice-dev libavformat-dev libavfilter-dev libswscale-dev

      - name: Build executable
        if: ${{ matrix.target == 'Linux' || matrix.target == 'LinuxAppImage' }}
        run: |
          cd linux
          export KIVY_WINDOW=sdl2
          export SDL_VIDEODRIVER=dummy
          export KIVY_GL_BACKEND=angle_sdl2
          export KIVY_LOG_LEVEL=warning
          python -m PyInstaller tlum.spec
          mkdir -p ./dist/tlum/assets
          cp -r ./../assets/* ./dist/tlum/assets/
          cp ./../com.tercad.tlum.svg ./dist/tlum/
          cp ./../com.tercad.tlum.desktop ./dist/tlum/

      - name: Compress Linux Package
        if: matrix.target == 'Linux'
        run: tar -czf "$GITHUB_WORKSPACE/tlum_Linux.tar.gz" .
        working-directory: ${{ matrix.build_path }}

# Linux: AppImage
      - name: Patch Manifest
        if: matrix.target == 'LinuxAppImage'
        run: |
          cp -r ./../linux/dist/tlum/* ./AppDir
          sh patch.sh -v "${{ needs.release.outputs.version }}"
        working-directory: ${{ matrix.build_path }}

      - name: Build Linux AppImage
        if: matrix.target == 'LinuxAppImage'
        run: |
          sudo apt-get install -y libfuse2
          wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
          chmod +x appimage-builder-x86_64.AppImage
          ./appimage-builder-x86_64.AppImage --recipe AppImageBuilder.yml
          cp Tlum-${{ needs.release.outputs.version }}-x86_64.AppImage "$GITHUB_WORKSPACE/tlum_${{ matrix.target }}.AppImage"
        working-directory: ${{ matrix.build_path }}

# Linux: Snap
      - name: Install Snapcraft
        if: matrix.target == 'LinuxSnap'
        uses: canonical/setup-lxd@v0.1.1

      - name: Update Version
        if: matrix.target == 'LinuxSnap'
        run: |
          VERSION="${{ needs.release.outputs.version }}+${{ needs.release.outputs.build_number }}"
          echo "Updating snap version to $VERSION"
          sed -i "s/^version:.*$/version: $VERSION/" snapcraft.yaml
          cat snapcraft.yaml | grep version

      - name: Build Snap
        if: matrix.target == 'LinuxSnap'
        run: |
          sudo snap install snapcraft --classic
          snapcraft pack --verbose
          cp tlum_${{ needs.release.outputs.version }}+${{ needs.release.outputs.build_number }}_amd64.snap "$GITHUB_WORKSPACE/tlum_${{ matrix.target }}.snap"

## TODO: Resolve failure on start: "Emergency stop (memory image dumped to disk)"
#      - name: Publish Snap
#        if: matrix.target == 'LinuxSnap'
#        env:
#          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_CREDENTIALS }}
#        run: |
#          sudo --preserve-env=SNAPCRAFT_STORE_CREDENTIALS snapcraft upload tlum_${{ matrix.target }}.snap --release=latest/stable

# Android
      - name: Install dependencies
        if: matrix.target == 'Android'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake libtool m4 \
              libffi-dev pkg-config libltdl-dev openjdk-17-jdk unzip
          # Error: App must support 16 KB memory page sizes
          pip install --upgrade git+https://github.com/kivy/python-for-android.git@develop
          pip install --upgrade git+https://github.com/kivy/buildozer.git@master

      - name: Apply Android Keychain
        if: matrix.target == 'Android'
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          ANDROID_KEYSTORE_PSSW: ${{ secrets.ANDROID_KEYSTORE_PSSW }}
        run: |
          echo -n "$ANDROID_KEYSTORE" | base64 -d > key.keystore
          echo "P4A_RELEASE_KEYSTORE=$(pwd)/key.keystore" >> $GITHUB_ENV
          echo "P4A_RELEASE_KEYSTORE_PASSWD=$ANDROID_KEYSTORE_PSSW" >> $GITHUB_ENV
          echo "P4A_RELEASE_KEYALIAS_PASSWD=$ANDROID_KEYSTORE_PSSW" >> $GITHUB_ENV
          echo "P4A_RELEASE_KEYALIAS=key" >> $GITHUB_ENV

      - name: Update version and build number
        if: matrix.target == 'Android'
        run: |
          sed -i "s/^version = .*/version = ${{ needs.release.outputs.version }}/" buildozer.spec
          sed -i "s/^android.numeric_version = .*/android.numeric_version = ${{ needs.release.outputs.build_number }}/" buildozer.spec

          echo "Updated buildozer.spec:"
          grep "^version = " buildozer.spec
          grep "^android.numeric_version" buildozer.spec

      - name: Compile Android package
        if: matrix.target == 'Android'
        run: |
          buildozer android release || true
          # Fix long build issue
          find .buildozer -name jnius_utils.pxi -exec sed -i 's/isinstance(arg, long) and //' {} +
          find .buildozer -name jnius_utils.pxi -exec sed -i 's/or isinstance(arg, long)//' {} +
          find .buildozer -name jnius_conversion.pxi -exec sed -i "s/isinstance(py_arg, (int, long))/isinstance(py_arg, int)/g" {} +
          find .buildozer -name jnius_conversion.pxi -exec sed -i "s/isinstance(obj, (int, long))/isinstance(obj, int)/g" {} +
          find .buildozer -name jnius_conversion.pxi -exec sed -i "/long: 'J',/d" {} +
          find .buildozer -name weakproxy.pyx -exec sed -i '/def __long__(self):/,+1d' {} +
          find .buildozer -name context_instructions.pyx -exec sed -i 's/long(h \* 6\.0)/int(h * 6.0)/g' {} +
          find .buildozer -name opengl.pyx -exec sed -i 's/(long, int)/(int)/g' {} +
          # Rebuild after fixes
          buildozer android release

      - name: Search for AAB file and copy to workspace
        if: matrix.target == 'Android'
        run: |
          echo "Searching for AAB files in build directory..."
          APK_PATH=$(find build -name "*.aab" -type f | head -1)
          cp "$APK_PATH" "$GITHUB_WORKSPACE/tlum_Android.aab"

#
      - name: Upload ${{ matrix.target }} Artifact
        id: upload_release_asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./tlum_${{ matrix.target }}${{ matrix.asset_extension }}
          asset_name: tlum_${{ matrix.target }}${{ matrix.asset_extension }}
          asset_content_type: ${{ matrix.asset_content_type }}

# Linux: Flatpak
  build-flatpak:
    uses: ./.github/workflows/build_package_flatpak.yml
    permissions:
      contents: write
    if: success()
    needs:
      - release
      - build
    secrets: inherit
    with:
      version: ${{ needs.release.outputs.version }}
      sha: ${{ github.sha }}
      upload_url: ${{ needs.release.outputs.upload_url }}
      is_release: true
